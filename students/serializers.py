from rest_framework import serializersfrom .models import Student, StudentCoursefrom schools_app.models import Schoolclass StudentSerializers(serializers.ModelSerializer):	average_score = serializers.IntegerField(default=10)	class Meta:		model = Student		fields = ["id",		          "name",		          "date_of_birth",		          "school",		          "is_active",		          "is_graduated",		          "average_score"		          ]	def to_representation(self, instance):		response = super().to_representation(instance)		student_courses = StudentCourse.objects.filter(student=instance.id)		result, count_courses = 0, 0		for course in student_courses:			result += course.score			count_courses += 1		if count_courses != 0:			response["average_score"] = int(result / count_courses)		return response# class StudentCourseSerializers(serializers.ModelSerializer):## 	class Meta:# 		model = StudentCourse# 		fields = ["student",# 		          "course",# 		          "score",# 		          ]## 	def to_representation(self, instance):# 		response = super().to_representation(instance)# 		response["student"] = StudentCourse.objects.filter(course=instance)# 		return response